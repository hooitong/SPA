procedure A {
 	m = 5; //1
 	x = 2; // 2
 	while looper{ //3
		if looper then{ //4
			p = p * (x+y-z); //5
			y = 2; //6
 			p = p + q; //7
			
		}
		else{
			q = x + y; //8
			z = q; //9
		}
	}
 	z = x * y + 2; } //10
// BB - 20
procedure B {
	if p then{  // 11
		y = z; // 12
	}
	else{
		y = 2 + n - z * y; // 13
		while outerloop1{ // 14
			while innerloop1{ // 15
				p = n +q + m; // 16
					while innerloop2{ //17
						m = m +(x * y) - n * q; //18
						call Foxtrot; //19
					}
			}
		}
	}
	while y { //20
		
		call Foxtrot; //21
	}

 	z = x + y; } //22
// BB - 3, 7

procedure C {
	while outerloop1{ //23
		if r then{ //24
			r = r+1; //25
			call D; //26
		}
		else{
			r = r + q; //27
			call Echo; //28
		}
	}
	x = x + z - (y * z); //29
	call Foxtrot; //30
}

procedure D{
	p = q - r * z; //31
	r = r - z * p; //32
	call A; //33
	call B; //34
}
// BB - 23

procedure Echo{
	call Foxtrot; //35
	x = 1 + y - p; //36
	call Foxtrot; //37
	p = x - 1; //38
	if p then{ //39
		z = z -1; //40
		y = y + 1; //41
		call Foxtrot; //42
	}
	else{
		p = q; //43
	}
}
//BB - 23

procedure Foxtrot{
	if p then { //44
		z = x * z + 1; //45
		y = y + 1; //46
		x = 2; //47
		if q then{ //48
			r = r + 1; //49
			x = r + 1; //50
		}
		else{
			x = 1 + m - q; //51
		}
	}
	else{
		x = r; //52
	}
}